# =====================================================
# DC_2013 RunDeepForcedSource table configuration file
# =====================================================

# Partitioning parameters.
part = {
    # The partitioning position is the position of the associated object. : N/A
    pos = 'raObject, declObject'
    num-stripes = 85 
    num-sub-stripes = 12
    # Managing RunDeepForcedSource duplicate w.r.t. Serge remark :
    # It should be the case that duplicates have positions that are extremely close to one another.
    # So the first thing to do would be to go ahead and partition with the deep forced source position anyway.
    # To check that no duplicates where split across chunks, you’ll want to set up the partitioner such that each chunk contains exactly one sub-chunk,
    # and such that the overlap radius is non-zero but small (let’s say an arc-minute). This way, the partitioner will split input into chunks, and,
    # for each chunk, provide nearby rows (the overlap). If the two deep forced sources in a duplicate pair are assigned to different chunks,
    # then one will be in the overlap of the chunk for the other, and vice-versa.
    overlap = 0.016666666666666666
}

# Output CSV format.
out.csv = {
    null      = '\\N'
    delimiter = '\t'
    escape    = '\\'
    no-quote  = true
}

in.csv = {
    null      = '\\N'
    escape    = '\\'
    delimiter	= '\t'
    # List of Source table column names, in order of occurrence.
    field 	= [
        sourceId,
        scienceCcdExposureId,
        filterId,
        objectId,
        movingObjectId,
        procHistoryId,
        ra,
        raSigmaForDetection,
        raSigmaForWcs,
        decl,
        declSigmaForDetection,
        declSigmaForWcs,
        htmId20,
        xFlux,
        xFluxSigma,
        yFlux,
        yFluxSigma,
        raFlux,
        raFluxSigma,
        declFlux,
        declFluxSigma,
        xPeak,
        yPeak,
        raPeak,
        declPeak,
        xAstrom,
        xAstromSigma,
        yAstrom,
        yAstromSigma,
        raAstrom,
        raAstromSigma,
        declAstrom,
        declAstromSigma,
        raObject,
        declObject,
        taiMidPoint,
        taiRange,
        psfFlux,
        psfFluxSigma,
        apFlux,
        apFluxSigma,
        modelFlux,
        modelFluxSigma,
        petroFlux,
        petroFluxSigma,
        instFlux,
        instFluxSigma,
        nonGrayCorrFlux,
        nonGrayCorrFluxSigma,
        atmCorrFlux,
        atmCorrFluxSigma,
        apDia,
        Ixx,
        IxxSigma,
        Iyy,
        IyySigma,
        Ixy,
        IxySigma,
        psfIxx,
        psfIxxSigma,
        psfIyy,
        psfIyySigma,
        psfIxy,
        psfIxySigma,
        e1_SG,
        e1_SG_Sigma,
        e2_SG,
        e2_SG_Sigma,
        resolution_SG,
        shear1_SG,
        shear1_SG_Sigma,
        shear2_SG,
        shear2_SG_Sigma,
        sourceWidth_SG,
        sourceWidth_SG_Sigma,
        shapeFlag_SG,
        snr,
        chi2,
        sky,
        skySigma,
        extendedness,
        flux_Gaussian,
        flux_Gaussian_Sigma,
        flux_ESG,
        flux_ESG_Sigma,
        sersicN_SG,
        sersicN_SG_Sigma,
        radius_SG,
        radius_SG_Sigma,
        flux_flux_SG_Cov,
        flux_e1_SG_Cov,
        flux_e2_SG_Cov,
        flux_radius_SG_Cov,
        flux_sersicN_SG_Cov,
        e1_e1_SG_Cov,
        e1_e2_SG_Cov,
        e1_radius_SG_Cov,
        e1_sersicN_SG_Cov,
        e2_e2_SG_Cov,
        e2_radius_SG_Cov,
        e2_sersicN_SG_Cov,
        radius_radius_SG_Cov,
        radius_sersicN_SG_Cov,
        sersicN_sersicN_SG_Cov,
        flagForAssociation,
        flagForDetection,
        flagForWcs
    ]
}
